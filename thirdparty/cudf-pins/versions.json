{
  "packages" : 
  {
    "CCCL" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "05e019afe53f9b0e4454cbd822f9bdda18df49bb",
      "git_url" : "https://github.com/NVIDIA/cccl.git",
      "patches" : 
      [
        {
          "fixed_in" : "",
          "inline_patch" : 
          {
            "content" : 
            [
              "diff --git a/cub/cub/block/block_merge_sort.cuh b/cub/cub/block/block_merge_sort.cuh",
              "index 29510db5e..cf57e5786 100644",
              "--- a/cub/cub/block/block_merge_sort.cuh",
              "+++ b/cub/cub/block/block_merge_sort.cuh",
              "@@ -95,7 +95,7 @@ _CCCL_DEVICE _CCCL_FORCEINLINE void SerialMerge(",
              "   KeyT key1 = keys_shared[keys1_beg];",
              "   KeyT key2 = keys_shared[keys2_beg];",
              "",
              "-#pragma unroll",
              "+#pragma unroll 1",
              "   for (int item = 0; item < ITEMS_PER_THREAD; ++item)",
              "   {",
              "     const bool p  = (keys2_beg < keys2_end) && ((keys1_beg >= keys1_end) || compare_op(key2, key1));",
              "@@ -374,7 +374,7 @@ public:",
              "       //",
              "       KeyT max_key = oob_default;",
              "",
              "-#pragma unroll",
              "+#pragma unroll 1",
              "       for (int item = 1; item < ITEMS_PER_THREAD; ++item)",
              "       {",
              "         if (ITEMS_PER_THREAD * linear_tid + item < valid_items)",
              "diff --git a/cub/cub/thread/thread_sort.cuh b/cub/cub/thread/thread_sort.cuh",
              "index 7d9e8622f..da5627306 100644",
              "--- a/cub/cub/thread/thread_sort.cuh",
              "+++ b/cub/cub/thread/thread_sort.cuh",
              "@@ -87,10 +87,10 @@ StableOddEvenSort(KeyT (&keys)[ITEMS_PER_THREAD], ValueT (&items)[ITEMS_PER_THRE; {;   constexpr bool KEYS_ONLY = ::cuda::std::is_same<ValueT, NullType>::value;;;-#pragma unroll;+#pragma unroll 1;   for (int i = 0; i < ITEMS_PER_THREAD; ++i);   {;-#pragma unroll;+#pragma unroll 1;     for (int j = 1 & i; j < ITEMS_PER_THREAD - 1; j += 2);     {;       if (compare_op(keys[j + 1], keys[j]))"
            ],
            "type" : "diff"
          },
          "issue" : "Improve Thrust sort compile times by not unrolling loops for inlined comparators [https://github.com/rapidsai/cudf/pull/10577]"
        },
        {
          "fixed_in" : "",
          "inline_patch" : 
          {
            "content" : 
            [
              "diff --git a/cub/cub/device/dispatch/dispatch_radix_sort.cuh b/cub/cub/device/dispatch/dispatch_radix_sort.cuh",
              "index 0606485bb..dbb99ff13 100644",
              "--- a/cub/cub/device/dispatch/dispatch_radix_sort.cuh",
              "+++ b/cub/cub/device/dispatch/dispatch_radix_sort.cuh",
              "@@ -1085,7 +1085,7 @@ struct DeviceRadixSortPolicy",
              "   };",
              " ",
              "   /// SM60 (GP100)",
              "-  struct Policy600 : ChainedPolicy<600, Policy600, Policy500>",
              "+  struct Policy600 : ChainedPolicy<600, Policy600, Policy600>",
              "   {",
              "     enum",
              "     {",
              "diff --git a/cub/cub/device/dispatch/dispatch_reduce.cuh b/cub/cub/device/dispatch/dispatch_reduce.cuh",
              "index f39613adb..75bd16ff9 100644",
              "--- a/cub/cub/device/dispatch/dispatch_reduce.cuh",
              "+++ b/cub/cub/device/dispatch/dispatch_reduce.cuh",
              "@@ -488,7 +488,7 @@ struct DeviceReducePolicy",
              "   };",
              " ",
              "   /// SM60",
              "-  struct Policy600 : ChainedPolicy<600, Policy600, Policy350>",
              "+  struct Policy600 : ChainedPolicy<600, Policy600, Policy600>",
              "   {",
              "     static constexpr int threads_per_block  = 256;",
              "     static constexpr int items_per_thread   = 16;",
              "diff --git a/cub/cub/device/dispatch/tuning/tuning_scan.cuh b/cub/cub/device/dispatch/tuning/tuning_scan.cuh",
              "index 419908c4e..6ab0840e1 100644",
              "--- a/cub/cub/device/dispatch/tuning/tuning_scan.cuh",
              "+++ b/cub/cub/device/dispatch/tuning/tuning_scan.cuh",
              "@@ -339,7 +339,7 @@ struct DeviceScanPolicy",
              "   /// SM600",
              "   struct Policy600",
              "       : DefaultTuning",
              "-      , ChainedPolicy<600, Policy600, Policy520>",
              "+      , ChainedPolicy<600, Policy600, Policy600>",
              "   {};",
              " ",
              "   /// SM800"
            ],
            "type" : "diff"
          },
          "issue" : "Improve Thrust scan compile times by reducing the number of kernels generated [https://github.com/rapidsai/cudf/pull/8183]"
        }
      ],
      "version" : "2.7.0"
    },
    "GTest" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "b796f7d44681514f58a683a3a71ff17c94edb0c1",
      "git_url" : "https://github.com/google/googletest.git",
      "version" : "1.13.0"
    },
    "bs_thread_pool" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "097aa718f25d44315cadb80b407144ad455ee4f9",
      "git_url" : "https://github.com/bshoshany/thread-pool.git",
      "version" : "4.1.0"
    },
    "cuco" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "deab5799f3e4226cb8a49acf2199c03b14941ee4",
      "git_url" : "https://github.com/NVIDIA/cuCollections.git",
      "version" : "0.0.1"
    },
    "dlpack" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "365b823cedb281cd0240ca601aba9b78771f91a3",
      "git_url" : "https://github.com/dmlc/dlpack.git",
      "version" : "0.8"
    },
    "flatbuffers" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "595bf0007ab1929570c7671f091313c8fc20644e",
      "git_url" : "https://github.com/google/flatbuffers.git",
      "version" : "24.3.25"
    },
    "fmt" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "0c9fce2ffefecfdce794e1859584e25877b7b592",
      "git_url" : "https://github.com/fmtlib/fmt.git",
      "patches" : 
      [
        {
          "inline_patch" : 
          {
            "content" : 
            [
              "diff --git a/include/fmt/base.h b/include/fmt/base.h",
              "index 62764942..60f7483b 100644",
              "--- a/include/fmt/base.h",
              "+++ b/include/fmt/base.h",
              "@@ -464,6 +464,9 @@ template <typename Char> FMT_CONSTEXPR auto length(const Char* s) -> size_t {",
              "   return len;",
              " }",
              " ",
              "+#if defined(__NVCC__)",
              "+#pragma nv_diag_suppress 128",
              "+#endif",
              " template <typename Char>",
              " FMT_CONSTEXPR auto compare(const Char* s1, const Char* s2, std::size_t n)",
              "     -> int {",
              "@@ -474,6 +477,9 @@ FMT_CONSTEXPR auto compare(const Char* s1, const Char* s2, std::size_t n)",
              "   }",
              "   return 0;",
              " }",
              "+#if defined(__NVCC__)",
              "+#pragma nv_diag_default 128",
              "+#endif",
              " ",
              " namespace adl {",
              " using namespace std;"
            ],
            "type" : "diff"
          },
          "issue" : "fmt 11.0.2 produces a warning about an unreachable loop when compiled with nvcc"
        }
      ],
      "version" : "11.0.2"
    },
    "jitify" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "e38b993f4cb3207745735c51d4f61cdaa735b7ac",
      "git_url" : "https://github.com/rapidsai/jitify.git",
      "version" : "2.0.0"
    },
    "kvikio" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "059c49f988d86ea5398568d106881ddd46e2b34e",
      "git_url" : "https://github.com/rapidsai/kvikio.git",
      "version" : "25.02"
    },
    "nanoarrow" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "4bf5a9322626e95e3717e43de7616c0a256179eb",
      "git_url" : "https://github.com/apache/arrow-nanoarrow.git",
      "version" : "0.7.0.dev"
    },
    "nvcomp" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "v2.2.0",
      "git_url" : "https://github.com/NVIDIA/nvcomp.git",
      "proprietary_binary" : 
      {
        "aarch64-linux" : "https://developer.download.nvidia.com/compute/nvcomp/redist/nvcomp/linux-sbsa/nvcomp-linux-sbsa-${version}_cuda${cuda-toolkit-version-mapping}-archive.tar.xz",
        "x86_64-linux" : "https://developer.download.nvidia.com/compute/nvcomp/redist/nvcomp/linux-x86_64/nvcomp-linux-x86_64-${version}_cuda${cuda-toolkit-version-mapping}-archive.tar.xz"
      },
      "proprietary_binary_cuda_version_mapping" : 
      {
        "11" : "11",
        "12" : "12"
      },
      "version" : "4.1.0.6"
    },
    "nvtx3" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "e170594ac7cf1dac584da473d4ca9301087090c1",
      "git_url" : "https://github.com/NVIDIA/NVTX.git",
      "version" : "3.1.0"
    },
    "rapids_logger" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "8968ab3337f31c845d4e3bf6c55ae89242ded22b",
      "git_url" : "https://github.com/rapidsai/rapids-logger.git",
      "version" : "0.1.0"
    },
    "rmm" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "401483cc4498a7082355c796fcdf1fe2eafe331c",
      "git_url" : "https://github.com/rapidsai/rmm.git",
      "version" : "25.02"
    },
    "spdlog" : 
    {
      "always_download" : true,
      "git_shallow" : false,
      "git_tag" : "27cb4c76708608465c413f6d0e6b8d99a4d84302",
      "git_url" : "https://github.com/gabime/spdlog.git",
      "version" : "1.14.1"
    }
  }
}