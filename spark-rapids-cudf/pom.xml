<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2022, NVIDIA CORPORATION.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.nvidia</groupId>
    <artifactId>spark-rapids-jni-parent</artifactId>
    <version>22.04.0-SNAPSHOT</version>
  </parent>
  <artifactId>spark-rapids-cudf</artifactId>
  <version>22.04.0-SNAPSHOT</version>
  <packaging>jar</packaging>
  <name>RAPIDS Accelerator cudf</name>
  <description>RAPIDS cuDF customized for the RAPIDS Accelerator for Apache Spark</description>

  <properties>
    <cudf.path>${project.basedir}/../thirdparty/cudf</cudf.path>
    <libcudf.build.path>${cudf.path}/cpp/build</libcudf.build.path>
    <libcudf.build.configure>false</libcudf.build.configure>
    <libcudf.clean.skip>true</libcudf.clean.skip>
    <libcudfjni.build.path>${project.build.directory}/cmake-build</libcudfjni.build.path>
    <submodule.check.skip>false</submodule.check.skip>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.apache.arrow</groupId>
      <artifactId>arrow-vector</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-avro</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>submodule check</id>
            <phase>validate</phase>
            <configuration>
              <skip>${submodule.check.skip}</skip>
              <target>
                <exec dir="${project.basedir}/.."
                      failonerror="true"
                      executable="${project.basedir}/../build/submodule-check">
                </exec>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>clean libcudf</id>
            <phase>clean</phase>
            <configuration>
              <skip>${libcudf.clean.skip}</skip>
              <target>
                <delete dir="${libcudf.build.path}" includeemptydirs="true"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>build libcudf</id>
            <phase>validate</phase>
            <configuration>
              <target>
                <property name="cudf.path" value="${cudf.path}"/>
                <property name="libcudf.build.path" value="${libcudf.build.path}"/>
                <property name="libcudf.build.configure" value="${libcudf.build.configure}"/>
                <property name="CPP_PARALLEL_LEVEL" value="${CPP_PARALLEL_LEVEL}"/>
                <property name="GPU_ARCHS" value="${GPU_ARCHS}"/>
                <property name="PER_THREAD_DEFAULT_STREAM" value="${PER_THREAD_DEFAULT_STREAM}"/>
                <property name="RMM_LOGGING_LEVEL" value="${RMM_LOGGING_LEVEL}"/>
                <property name="USE_GDS" value="${USE_GDS}"/>
                <ant antfile="build-libcudf.xml" target="build-libcudf"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>build libcudfjni</id>
            <phase>validate</phase>
            <configuration>
              <target>
                <mkdir dir="${libcudfjni.build.path}"/>
                <exec dir="${libcudfjni.build.path}"
                      failonerror="true"
                      executable="cmake">
                  <env key="CUDF_CPP_BUILD_DIR" value="${libcudf.build.path}"/>
                  <env key="CUDF_ROOT" value="${cudf.path}"/>
                  <arg value="${cudf.path}/java/src/main/native"/>
                  <arg value="-DGPU_ARCHS=${GPU_ARCHS}"/>
                  <arg value="-DPER_THREAD_DEFAULT_STREAM=${PER_THREAD_DEFAULT_STREAM}"/>
                  <arg value="-DRMM_LOGGING_LEVEL=${RMM_LOGGING_LEVEL}"/>
                  <arg value="-DUSE_GDS=${USE_GDS}"/>
                </exec>
                <exec dir="${libcudfjni.build.path}"
                      failonerror="true"
                      executable="cmake">
                  <arg value="--build"/>
                  <arg value="${libcudfjni.build.path}"/>
                  <arg value="-j${CPP_PARALLEL_LEVEL}"/>
                </exec>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>build-info</id>
            <phase>generate-resources</phase>
            <configuration>
              <target>
                <mkdir dir="${project.build.directory}/extra-resources"/>
                <exec executable="bash"
                      output="${project.build.directory}/extra-resources/cudf-java-version-info.properties"
                      failonerror="true">
                  <arg value="${project.basedir}/../build/build-info"/>
                  <arg value="${project.version}"/>
                  <arg value="${cudf.path}"/>
                </exec>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-cudf-src</id>
            <goals>
              <goal>add-source</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <sources>
                <source>${cudf.path}/java/src/main/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-cudf-test-src</id>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <phase>generate-test-sources</phase>
            <configuration>
              <sources>
                <source>${cudf.path}/java/src/test/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-cudf-test-resource</id>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <phase>generate-test-resources</phase>
            <configuration>
              <resources>
                <resource>
                  <directory>${cudf.path}/java/src/test/resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <classifier>${cuda.version}</classifier>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
            <configuration>
              <classifier>tests</classifier>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-native-libs</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <overwrite>true</overwrite>
              <outputDirectory>${project.build.outputDirectory}/${os.arch}/${os.name}</outputDirectory>
              <resources>
                <resource>
                  <directory>${libcudf.build.path}</directory>
                  <includes>
                    <include>libcudf.so</include>
                  </includes>
                </resource>
                <resource>
                  <directory>${libcudfjni.build.path}</directory>
                  <includes>
                    <include>libcudfjni.so</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>
    </plugins>
    <resources>
      <resource>
        <!-- Include the properties file to provide the build information. -->
        <directory>${project.build.directory}/extra-resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
</project>
