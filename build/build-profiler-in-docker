#!/bin/bash

#
# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Build only the spark-rapids-profile-converter tool in a Docker container with devtoolset

set -e

# Base paths relative to this script's location
SCRIPTDIR=$(cd $(dirname $0); pwd)

# Configuration
USE_GDS=${USE_GDS:-OFF}
export CMAKE_GENERATOR=${CMAKE_GENERATOR:-"Ninja"}
export CUDA_VERSION=${CUDA_VERSION:-11.8.0}
CUDA_CLASSIFIER=cuda${CUDA_VERSION%%.*}
BUILD_FAULTINJ=${BUILD_FAULTINJ:-OFF}
BUILD_PROFILER=${BUILD_PROFILER:-ON}

# Set env for arm64 build
if [ "$(uname -m)" == "aarch64" ]; then
  USE_GDS="OFF"
  BUILD_FAULTINJ="OFF"
  BUILD_PROFILER="OFF"
  echo "Warning: Profiler build is not supported on arm64 (CUPTI static library not available)"
  exit 1
fi

# First, ensure cudf is built (required dependency)
# We'll do a minimal build without tests/benchmarks
$SCRIPTDIR/build-in-docker validate \
    -DUSE_GDS=$USE_GDS \
    -DBUILD_FAULTINJ=$BUILD_FAULTINJ \
    -DBUILD_PROFILER=$BUILD_PROFILER \
    -DBUILD_TESTS=OFF \
    -DBUILD_BENCHMARKS=OFF \
    -DBUILD_CUDF_TESTS=OFF \
    -DBUILD_CUDF_BENCHMARKS=OFF \
    -Dcuda.version=$CUDA_CLASSIFIER

# Now build just the profiler converter target
NATIVE_BUILD_PATH=$(cd "$SCRIPTDIR/.." && pwd)/target/jni/cmake-build

# Set up devtoolset-specific flags for the profiler converter
# These will be passed as environment variables to the compiler/linker
DEVTOOLSET_CXX_FLAGS=""
DEVTOOLSET_LINKER_FLAGS=""

$SCRIPTDIR/run-in-docker bash -c "
  # Check if we're using devtoolset and set appropriate flags
  if [ -n \"\$DEVTOOLSET_ROOT\" ] || [ -d /opt/rh/gcc-toolset-11 ]; then
    # Use the devtoolset root if available, otherwise use the known path
    TOOLSET_ROOT=\${DEVTOOLSET_ROOT:-/opt/rh/gcc-toolset-11/root}
    
    # Set compiler flags for includes
    export CXXFLAGS=\"\${CXXFLAGS} -I\${TOOLSET_ROOT}/usr/include/c++/11 -I\${TOOLSET_ROOT}/usr/include/c++/11/x86_64-redhat-linux\"
    
    # Set linker flags for libraries and rpath
    export LDFLAGS=\"\${LDFLAGS} -L\${TOOLSET_ROOT}/usr/lib/gcc/x86_64-redhat-linux/11 -Wl,-rpath,\${TOOLSET_ROOT}/usr/lib/gcc/x86_64-redhat-linux/11\"
  fi
  
  cd '$NATIVE_BUILD_PATH' && \
  cmake --build . --target spark_rapids_profile_converter --parallel \${PARALLEL_LEVEL:-8}
"

if [ $? -eq 0 ]; then
    echo "=========================================="
    echo "Profiler converter built successfully!"
    echo "Location: $NATIVE_BUILD_PATH/profiler/spark_rapids_profile_converter"
    echo "=========================================="
else
    echo "Build failed!"
    exit 1
fi 