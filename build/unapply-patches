#!/bin/bash

#
# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e

BASE_DIR=$( git rev-parse --show-toplevel )

PATCH_DIR=${PATCH_DIR:-$(realpath "$BASE_DIR/patches/")}

CUDF_DIR=${CUDF_DIR:-$(realpath "$BASE_DIR/thirdparty/cudf/")}

# Apply pattches to CUDF is problematic in a number of ways. But ultimately it comes down to
# making sure that a user can do development work in spark-rapids-jni without the patches
# getting in the way
# The operations I really want to support no matter what state CUDF is in are
# 1) Build the repo from scratch
# 2) Rebuild the repo without having to clean and start over
# 3) upmerge to a new version of the plugin including updating the cudf submodule
#
# Building from scratch is simple. We want clean to unapply any patches and 
# build to apply them. But if we want to rebuild without a clean we need to know what
# state the CUDF repo is in. Did we apply patches to it or not. The fastest way to do this
# is to save some state files about what happened. But a user could mess with CUDF directly
# so we want to have ways to double check that they are indeed correct.

FULLY_PATCHED_FILE="$CUDF_DIR/spark-rapids-jni.patch"

pushd "$CUDF_DIR"

PATCH_FILES=$(find "$PATCH_DIR" -type f -not -empty)

if [ -z "$PATCH_FILES" ] ; then
  echo "No patches to remove"
  exit 0
fi

CHANGED_FILES=$(git status --porcelain --untracked-files=no)

if [ \( -s "$FULLY_PATCHED_FILE" \) -a  \( -n "$CHANGED_FILES" \) ] ; then
  if git apply --check -R "$FULLY_PATCHED_FILE"; then
    echo "Patches appear to have been applied, so going to remove them"
    git apply -R -v "$FULLY_PATCHED_FILE"
    rm -f "$FULLY_PATCHED_FILE"

    # Check for modifications, again
    if [ -n "$(git status --porcelain --untracked-files=no)" ] ; then
      echo "Error: CUDF repository has uncommitted changes. You might want to clean in manually if you know that is expected"
      git status --porcelain --untracked-files=no
      exit 1
    fi

    exit 0
  else
    echo "Files are changed, but in a way where the full path file does not apply to remove them $FULL_PATCHED_FILE"
    exit 1
  fi
fi

if [ -n "$CHANGED_FILES" ] ; then
  echo "Error: CUDF repository has uncommitted changes, but does not appear to have been patched. Please clean it and try again."
  echo "$CHANGED_FILE"
  exit 1
else
  echo "No changes in CUDF repository to remove"
fi

popd
