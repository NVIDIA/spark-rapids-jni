#!/bin/bash

#
# Copyright (c) 2022-2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Run a command in a Docker container with devtoolset

set -e

REPODIR_REL=$(git rev-parse --show-toplevel)
REPODIR=$(realpath "$REPODIR_REL")
GIT_COMMON_DIR_REL=$(git rev-parse --git-common-dir)
GIT_COMMON_DIR=$(realpath "$GIT_COMMON_DIR_REL")
WORKDIR=${WORKDIR:-$REPODIR}

CUDA_VERSION=${CUDA_VERSION:-11.8.0}
DOCKER_CMD=${DOCKER_CMD:-docker}
DOCKER_BUILD_EXTRA_ARGS=${DOCKER_BUILD_EXTRA_ARGS:-""}
if [ "$(uname -m)" == "aarch64" ]; then
    DOCKER_BUILD_EXTRA_ARGS="--build-arg TARGETPLATFORM=linux/arm64 --build-arg CMAKE_ARCH=aarch64 $DOCKER_BUILD_EXTRA_ARGS"
else
    DOCKER_BUILD_EXTRA_ARGS="--build-arg TARGETPLATFORM=linux/amd64 --build-arg CMAKE_ARCH=x86_64 $DOCKER_BUILD_EXTRA_ARGS"
fi
DOCKER_RUN_EXTRA_ARGS=${DOCKER_RUN_EXTRA_ARGS:-""}
LOCAL_CCACHE_DIR=${LOCAL_CCACHE_DIR:-"$HOME/.ccache"}
LOCAL_MAVEN_REPO=${LOCAL_MAVEN_REPO:-"$HOME/.m2/repository"}

SPARK_IMAGE_NAME="spark-rapids-jni-build:${CUDA_VERSION}-devel-rockylinux8"

# ensure directories exist
mkdir -p "$LOCAL_CCACHE_DIR" "$LOCAL_MAVEN_REPO"

$DOCKER_CMD build $DOCKER_BUILD_EXTRA_ARGS -f $REPODIR/ci/Dockerfile \
  --build-arg CUDA_VERSION=$CUDA_VERSION \
  -t $SPARK_IMAGE_NAME \
  $REPODIR/build

if [[ "$DOCKER_CMD" == "docker" ]]; then
  DOCKER_GPU_OPTS=${DOCKER_GPU_OPTS:-"--gpus all"}
fi

if (( $# == 0 )); then
  # no arguments gets an interactive shell
  DOCKER_OPTS="${DOCKER_OPTS} -it"
  RUN_CMD="/bin/bash"
else
  RUN_CMD="${@@Q}"
fi

HOST_MOUNT_TYPE=bind
RO_MOUNTS=(
  "/etc/group"
  "/etc/passwd"
  "/etc/shadow"
  "/etc/sudoers.d"
)

RW_MOUNTS=(
  "$GIT_COMMON_DIR"
  "$WORKDIR"
  "$LOCAL_CCACHE_DIR"
  "$LOCAL_MAVEN_REPO"
)

function mount_args() {
  local mount_mode=$1
  shift
  local mounts=("$@")
  for m in "${mounts[@]}"
  do
    if [[ "$mount_mode" == "ro" ]]
    then
      printf -- ' --mount type='$HOST_MOUNT_TYPE',src=%s,dst=%s,%s\n' "$m" "$m" "$mount_mode"
    else
      # rw is default
      printf -- ' --mount type='$HOST_MOUNT_TYPE',src=%s,dst=%s\n' "$m" "$m"
    fi
  done
}

if [[ "$HOST_CUDA_BIN_PATH" != "" ]]
then
  DOCKER_OPTS="$DOCKER_OPTS --mount type=$HOST_MOUNT_TYPE,src=$HOST_CUDA_BIN_PATH,dst=/usr/local/cuda,ro"
fi

# Running `bash` should already have gcc-toolset enabled when the container initialized.
$DOCKER_CMD run $DOCKER_GPU_OPTS $DOCKER_RUN_EXTRA_ARGS -u $(id -u):$(id -g) --rm \
  $(mount_args "ro" "${RO_MOUNTS[@]}") \
  $(mount_args "rw" "${RW_MOUNTS[@]}") \
  --workdir "$WORKDIR" \
  -e CCACHE_DIR="$LOCAL_CCACHE_DIR" \
  -e CMAKE_C_COMPILER_LAUNCHER="ccache" \
  -e CMAKE_CXX_COMPILER_LAUNCHER="ccache" \
  -e CMAKE_CUDA_COMPILER_LAUNCHER="ccache" \
  -e CMAKE_CXX_LINKER_LAUNCHER="ccache" \
  -e CMAKE_GENERATOR \
  -e CUDA_VISIBLE_DEVICES \
  -e PARALLEL_LEVEL \
  -e VERBOSE \
  $DOCKER_OPTS \
  $SPARK_IMAGE_NAME \
  bash -c "$RUN_CMD"
