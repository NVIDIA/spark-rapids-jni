/*
 * Copyright (c) 2023-2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.nvidia.spark.rapids.jni;

import ai.rapids.cudf.ColumnVector;
import ai.rapids.cudf.ColumnView;

// TODO: Remove this class after the plugin picks up `JSONUtils#extractRawMapFromJsonString`.
public class MapUtils {

  /**
   * Extract key-value pairs for each output map from the given json strings. These key-value are
   * copied directly as substrings of the input without any type conversion.
   * <p>
   * Since there is not any validity check, the output of this function may be different from
   * what generated by Spark's `from_json` function. Situations that can lead to
   * different/incorrect outputs may include:<br>
   * - The value in the input json string is invalid, such as 'abc' value for an integer key.<br>
   * - The value string can be non-clean format for floating-point type, such as '1.00000'.
   * <p>
   * The output of these situations should all be NULL or a value '1.0', respectively. However, this
   * function will just simply copy the input value strings to the output.
   *
   * @param jsonColumn The input strings column in which each row specifies a json object.
   * @return A map column (i.e., a column of type {@code List<Struct<String,String>>}) in
   * which the key-value pairs are extracted directly from the input json strings.
   */
  public static ColumnVector extractRawMapFromJsonString(ColumnView jsonColumn) {
    return JSONUtils.extractRawMapFromJsonString(jsonColumn);
  }

}
