<?xml version="1.0"?>
<!--
  Copyright (c) 2022, NVIDIA CORPORATION.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project name="libcudf-builder" xmlns:if="ant:if">
  <description>
    Configures and builds the libcudf library from the cudf submodule.
  </description>

  <target name="build-libcudf">
    <condition property="needConfigure">
      <or>
        <istrue value="${libcudf.build.configure}"/>
        <not>
          <available file="${libcudf.build.path}/CMakeCache.txt"/>
        </not>
      </or>
    </condition>

    <mkdir dir="${libcudf.install.path}"/>
    <mkdir dir="${libcudf.build.path}"/>
    <exec dir="${libcudf.build.path}"
          failonerror="true"
          executable="cmake"
          if:true="${needConfigure}">
      <arg value="${cudf.path}/cpp"/>
      <arg value="-DBUILD_SHARED_LIBS=OFF"/>
      <arg value="-DBUILD_TESTS=OFF"/>
      <arg value="-DCMAKE_CUDA_ARCHITECTURES=${GPU_ARCHS}"/>
      <arg value="-DCMAKE_INSTALL_PREFIX=${libcudf.install.path}"/>
      <arg value="-DCUDA_STATIC_RUNTIME=ON"/>
      <arg value="-DCUDF_ENABLE_ARROW_S3=OFF"/>
      <arg value="-DCUDF_ENABLE_ARROW_PARQUET=ON"/>
      <arg value="-DCUDF_USE_ARROW_STATIC=ON"/>
      <arg value="-DCUDF_USE_PER_THREAD_DEFAULT_STREAM=${CUDF_USE_PER_THREAD_DEFAULT_STREAM}" />
      <arg value="-DRMM_LOGGING_LEVEL=${RMM_LOGGING_LEVEL}" />
      <arg value="-DUSE_GDS=${USE_GDS}" />
    </exec>

    <exec dir="${libcudf.build.path}"
          failonerror="true"
          executable="cmake">
      <arg value="--build"/>
      <arg value="${libcudf.build.path}"/>
      <arg value="--target"/>
      <arg value="install"/>
      <arg value="-j${CPP_PARALLEL_LEVEL}"/>
    </exec>
  </target>
</project>
