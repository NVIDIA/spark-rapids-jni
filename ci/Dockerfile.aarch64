ARG CUDA_VERSION=11.5.2
FROM --platform=arm64 nvidia/cuda:$CUDA_VERSION-devel-ubuntu18.04

RUN apt update && \
apt-get -y install software-properties-common && \
add-apt-repository ppa:ubuntu-toolchain-r/test && \
apt update && \
apt-get -y install gcc-9 g++-9 && \
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 900 && \
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 900

RUN gcc -v

RUN apt install -y zlib1g-dev maven wget ninja-build git openjdk-8-jdk
RUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata

ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-arm64

# set to use java8 by default
RUN update-java-alternatives --set $JAVA_HOME

# 3.22.3: CUDA architecture 'native' support + flexible CMAKE_<LANG>_*_LAUNCHER for ccache
ARG CMAKE_VERSION=3.23.3

RUN cd /usr/local && wget --quiet https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-aarch64.tar.gz && \
   tar zxf cmake-${CMAKE_VERSION}-linux-aarch64.tar.gz && \
   rm cmake-${CMAKE_VERSION}-linux-aarch64.tar.gz
ENV PATH /usr/local/cmake-${CMAKE_VERSION}-linux-aarch64/bin:$PATH

# no aarch64 prebuilt binaries and ccmake seems not related to CI docker build. So comment out.
# ccache for interactive builds
# ARG CCACHE_VERSION=4.6

# RUN cd /tmp && wget --quiet https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}.tar.gz && \
#     tar zxf ccache-${CCACHE_VERSION}.tar.gz && \
#     rm ccache-${CCACHE_VERSION}.tar.gz && \
#     cd ccache-${CCACHE_VERSION} && \
#     mkdir build && \
#     cd build && \
#     cmake .. \
#         -DCMAKE_BUILD_TYPE=Release \
#         -DZSTD_FROM_INTERNET=ON \
#         -DREDIS_STORAGE_BACKEND=OFF && \
#     cmake --build . --parallel ${PARALLEL_LEVEL} --target install && \
#     rm -rf ccache-${CCACHE_VERSION}

## install a version of boost that is needed for arrow/parquet to work
RUN cd /usr/local && wget --quiet https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.tar.gz && \
  tar -xzf boost_1_79_0.tar.gz && \
  rm boost_1_79_0.tar.gz && \
  cd boost_1_79_0 && \
  ./bootstrap.sh --prefix=/usr/local && \
  ./b2 install --prefix=/usr/local --with-filesystem --with-system && \
   cd /usr/local && \
   rm -rf boost_1_79_0